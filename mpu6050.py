# -*- coding: utf-8 -*-
"""
Created on Thu Feb 22 22:09:54 2024

@author: calan
"""

# sensor.py
from i2c import I2CInterface
from register_map import RegisterMap

class MPU6050:
    def __init__(self, address, bus_number=1):
        self.address = address
        self.i2c = I2CInterface(bus_number)
        self.sr = 0

    def read_data(self, register):
        # Example: Read data from a specific register of the sensor
        data = self.i2c.read_byte_data(self.address, register)
        return data
    
    def write_data(self, register, value):
        # Example: Read data from a specific register of the sensor
        self.i2c.write_byte_data(self.address, register, value)

    def calibrate(self):
        # Example: Write calibration data to a specific register of the sensor
        self.i2c.write_byte(self.address, RegisterMap.REGISTER_B, RegisterMap.REGISTER_B_VALUE_1)
        
    def sample_rate_get(self):
        """
        Getter function of the Sample Rate for the MPU-6050. 
        The Sample Rate is generated by dividing the gyroscope output rate by SMPLRT_DIV.
        The sensor register output, FIFO output, and DMP sampling are all based on the Sample Rate.

        Returns
        -------
        None.

        """
        # read the register
        divider = self.read_data(RegisterMap.SMPLRT_DIV)
        
        # calculate the sample rate
        dlpf = int(self.i2c.int_to_binary_string(self.read_data(RegisterMap.CONFIG), 8)[-3:], 2)
        if dlpf == 0 or dlpf == 7:
            self.sr = 8/(1+divider)
        else: self.sr = 1/(1+divider)
                
        print("Present Configuration", self.i2c.int_to_binary_string(divider, 8))
        print("Sample rate is", self.sr, "kHz")
        
    def sample_rate_set(self, divider):
        """
        Setter function of the Sample Rate for the MPU-6050. 
        The Sample Rate is generated by dividing the gyroscope output rate by SMPLRT_DIV.
        The sensor register output, FIFO output, and DMP sampling are all based on the Sample Rate.
        
        Parameters
        ----------
        SMPLRT_DIV : int [0:256]
            Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV).

        Returns
        -------
        None.

        """
        
        # calculate the sample rate
        dlpf = int(self.i2c.int_to_binary_string(self.read_data(RegisterMap.CONFIG), 8)[-3:], 2)
        if dlpf == 0 or dlpf == 7:
            self.sr = 8/(1+divider)
        else: self.sr = 1/(1+divider)
                
        # calculate the new value
        divider_bits = self.i2c.int_to_binary_string(divider, 8)
        print("New Configuration", divider_bits)
        print("Sample rate is", self.sr, "kHz")
        
        # write in the register
        self.write_data(RegisterMap.SMPLRT_DIV, divider)

    def config_get(self, DLPF_CFG, EXT_SYNC_SET=0):
        """
        Getter function for the external Frame Synchronization (FSYNC) pin sampling and the Digital
        Low Pass Filter (DLPF) setting for both the gyroscopes and accelerometers.
        See register 26 for more information.
        
        Returns
        -------
        None.

        """
        # read the register
        data = self.read_data(RegisterMap.CONFIG)
        print("Present Configuration", self.i2c.int_to_binary_string(data, 8))
        
        # calculate the new value
        new_value = "00" + self.i2c.int_to_binary_string(EXT_SYNC_SET, 3) + self.i2c.int_to_binary_string(DLPF_CFG, 3) 
        print("New Configuration", new_value)
        
        # write in the register
        self.write_data(RegisterMap.CONFIG, self.i2c.binary_string_to_int(new_value))
        
    def config_set(self, DLPF_CFG, EXT_SYNC_SET=0):
        """
        Getter function for the external Frame Synchronization (FSYNC) pin sampling and the Digital
        Low Pass Filter (DLPF) setting for both the gyroscopes and accelerometers.
        See register 26 for more information.
        
        Parameters
        ----------
        EXT_SYNC_SET: int [0:8] 
            to be implemented
        DLPF_CFG: int [0:8] 
            See register 26 for more information.

        Returns
        -------
        None.

        """
        # read the register
        data = self.read_data(RegisterMap.CONFIG)
        print("Present Configuration", self.i2c.int_to_binary_string(data, 8))
        
        # calculate the new value
        new_value = "00" + self.i2c.int_to_binary_string(EXT_SYNC_SET, 3) + self.i2c.int_to_binary_string(DLPF_CFG, 3) 
        print("New Configuration", new_value)
        
        # write in the register
        self.write_data(RegisterMap.CONFIG, self.i2c.binary_string_to_int(new_value))
        
    def gyro_config_get(self):
        """
        Getter function to trigger gyroscope self-test and configure the gyroscopes’ full scale range.
        See register 27 for more information.

        Returns
        -------
        None.

        """

        data = self.read_data(RegisterMap.GYRO_CONFIG)
        bit_string = self.i2c.int_to_binary_string(data, 8)
        XG_ST = bit_string[0]
        YG_ST = bit_string[1]
        ZG_ST = bit_string[2]
        FS_SEL = bit_string[3:5]
        print("Self-Test activated on axis (x, y, z)", XG_ST, YG_ST, ZG_ST)
        print("Gyro full scale range +/-", 250*2**FS_SEL, "º/s")
        
    def gyro_config_set(self, XG_ST, YG_ST, ZG_ST, FS_SEL):
        """
        Setter function to trigger gyroscope self-test and configure the gyroscopes’ full scale range.
        See register 27 for more information.       

        Parameters
        ----------
        XG_ST : int [0:2]
            Activate the self-self on x-axis (1)
        YG_ST : int [0:2]
            Activate the self-self on y-axis (1)
        ZG_ST : int [0:2]
            Activate the self-self on z-axis (1)
        FS_SEL : int [0:4]
            Set the full scale range of the gyroscope

        Returns
        -------
        None.

        """
        bit_string = str(XG_ST) + str(YG_ST) + str(ZG_ST) + self.i2c.int_to_binary_string(FS_SEL, 2) + "000"
        self.write_data(RegisterMap.GYRO_CONFIG, self.i2c.binary_string_to_int(bit_string))
        
        print("Activation of Self-Test on axis (x, y, z)", XG_ST, YG_ST, ZG_ST)
        print("Setting the Gyro full scale range +/-", 250*2**FS_SEL, "º/s")

    def accel_config_get(self):
        """
        Getter function to trigger accelerometer self test and configure the accelerometer full scale
        range. 
        See register 28 for more information. 

        Returns
        -------
        None.

        """
        data = self.read_data(RegisterMap.ACCEL_CONFIG)
        bit_string = self.i2c.int_to_binary_string(data, 8)
        XA_ST = bit_string[0]
        YA_ST = bit_string[1]
        ZA_ST = bit_string[2]
        AFS_SEL = bit_string[3:5]
        print("Self-Test activated on axis (x, y, z)", XA_ST, YA_ST, ZA_ST)
        print("Gyro full scale range +/-", 2*2**AFS_SEL, "g")
        
        
        